; Some macros for printing things

        GBLS    printbufferaddress
        GBLS    printbufferregister

; if printbufferaddress is set, we use it; otherwise we use x12
printbufferaddress  SETS    ""
printbufferregister SETS    "x12"
printbuffersize * 20

; -------------------------------------------------------------------------
        MACRO
        SetupPrintBuffer $regnum
    [ "$printbufferaddress" = ""
        MOV     $regnum, $printbufferregister
    |
        ADRL    $regnum, $printbufferaddress
    ]
        MEND

; -------------------------------------------------------------------------
        MACRO
        PrintInteger    $regnum, $width
        PrintNumber     $regnum, $width, OS_ConvertInteger4
        MEND

; -------------------------------------------------------------------------
        MACRO
        PrintSigned    $regnum, $width
        PrintNumber     $regnum, $width, OS_ConvertInteger4, signed
        MEND

; -------------------------------------------------------------------------
        MACRO
        PrintHex        $regnum, $width
        SWI     OS_WriteI + '&'
    [ "$width" <> ""
        PrintNumber     $regnum, $width-1, OS_ConvertHex8
    |
        PrintNumber     $regnum, $width, OS_ConvertHex8
    ]
        MEND

        MACRO
        PrintHex2       $regnum, $width
        SWI     OS_WriteI + '&'
    [ "$width" <> ""
        PrintNumber     $regnum, $width-1, OS_ConvertHex2
    |
        PrintNumber     $regnum, $width, OS_ConvertHex2
    ]
        MEND

; -------------------------------------------------------------------------
        MACRO
        PrintMessage    $message, $width
        SWI     OS_WriteS
        = "$message", 0
        ALIGN
    [ "$width" <> ""
    [ $width > :LEN: "$message"
        Push    "x1"
        MOVS    x1, #$width - :LEN: "$message"
10
        SWINE   OS_WriteI + ' '
        SUBS    x1, x1, #1
        BPL     %BT10
        Pull    "x1"
    ]
    ]
        MEND

; -------------------------------------------------------------------------
        MACRO
        PrintNumber     $regnum, $width, $swinum, $signed
        Push    "x0-x2"
    [ "$regnum" <> "x0"
        MOV     x0, $regnum
    ]
        SetupPrintBuffer x1
        MOV     x2, #printbuffersize
    [ "$signed" <> ""
        CMP     x0, #0
        BGE     %FT10
        SUB     x2, x2, #1
        RSB     x0, x0, #0
        SWI     OS_WriteI + '-'
10
    ]
    [ "$swin" = ""
        SWI     OS_ConvertInteger4          ; they probably meant PrintInteger, so we just give them that
    |
        SWI     $swinum
    ]
        SWI     OS_Write0
    [ "$width" <> ""
        RSB     x2, x2, #printbuffersize     ; number of characters written
        RSBS    x2, x2, #$width              ; number of character to write as padding
        BMI     %FT20
10
        SWINE   OS_WriteI + ' '
        SUBS    x2, x2, #1
        BPL     %BT10
20
    ]
        Pull    "x0-x2"
        MEND

; -------------------------------------------------------------------------
        MACRO
        PrintString     $regnum, $width
        Push    "x0, x1"
    [ "$regnum" <> "x0"
        MOV     x0, $regnum
    ]
    [ "$regnum" <> "x1" :LAND: "$width" <> ""
        MOV     x1, x0
    ]
        SWI     OS_Write0
    [ "$width" <> ""
    [ $width > 0
        SUB     x1, x0, x1
        RSBS    x1, x1, #$width
40
        SWIPL   OS_WriteI + ' '
        SUBS    x1, x1, #1
        BPL     %BT40
    ]
    ]
        Pull    "x0, x1"
        MEND

; -------------------------------------------------------------------------
        MACRO
        PrintStringN    $regnum, $length
        Push    "x0-x1"
    [ "$length" = "x0"
        MOV     x1, $length
     [ "$regnum" = "x1"
        LDR     x0, [sp, #8]
     ]
    ]
    [ "$regnum" <> "x0" :LAND: "$length" <> "x0"
        MOV     x0, $regnum
    ]
    [ "$length" <> "x1" :LAND: "$length" <> "x0"
        MOV     x1, $length
    ]
        SWI     OS_WriteN
        Pull    "x0-x1"
        MEND

; -------------------------------------------------------------------------
        MACRO
        PrintStringCR   $regnum, $width
        Push    "x0-x2"
    [ "$regnum" <> "x0"
        MOV     x0, $regnum
    ]
        ; find the length we'll write
    [ "$regnum" <> "x1"
        MOV     x1, x0
    ]
10
        LDRB    w2, [x1], #1
        CMP     w2, #13
        BNE     %BT10
        ; r1-> the terminator
        SUB     x1, x1, x0
        SUB     x1, x1, #1                      ; don't print the terminator
        SWI     OS_WriteN
    [ "$width" <> ""
    [ $width > 0
        RSBS    x1, x1, #$width - 1
40
        SWIPL   OS_WriteI + ' '
        SUBS    x1, x1, #1
        BPL     %BT40
    ]
    ]
        Pull    "x0-x2"
        MEND

; -------------------------------------------------------------------------
        MACRO
        PrintStringCtrl   $regnum, $width
        Push    "x0-x2"
    [ "$regnum" <> "x0"
        MOV     x0, $regnum
    ]
        ; find the length we'll write
    [ "$regnum" <> "x1"
        MOV     x1, x0
    ]
10
        LDRB    w2, [r1], #1
        CMP     w2, #32
        BHS     %BT10
        ; r1-> the terminator
        SUB     x1, x1, x0
        SUB     x1, x1, #1                      ; don't print the terminator
        SWI     OS_WriteN
    [ "$width" <> ""
    [ $width > 0
        RSBS    x1, x1, #$width - 1
40
        SWIPL   OS_WriteI + ' '
        SUBS    x1, x1, #1
        BPL     %BT40
    ]
    ]
        Pull    "x0-x2"
        MEND

; -------------------------------------------------------------------------
        MACRO
        PrintLine    $message
    [ "$message" <> ""
        PrintMessage "$message", 0
    ]
        SWI     OS_NewLine
        MEND

; -------------------------------------------------------------------------
        MACRO
        PrintError
        STMFD   sp!, {r0, r1}
        SWI     OS_WriteI + '['
        LDR     r1, [r0], #4
        PrintHex r1
        SWI     OS_WriteI + ']'
        SWI     OS_WriteI + ' '
        PrintString r0
        LDMFD   sp!, {r0, r1}
        MEND


; -------------------------------------------------------------------------
; Print Named Bits
        MACRO
        PrintNamedBits $reg, $bits, $bitwidth
        STMFD   sp!, {r0-r5}
        LDR     r5, =$bits
        MOV     r3, $reg
        SWI     OS_WriteS
        = "Bit: ",0

; Print the bit pattern
        MOV     r0, #1 << ($bitwidth - 1)   ; current mask
        MOV     r1, #$bitwidth - 1          ; current bit number
        MOV     r2, #$bitwidth - 1          ; lowest bit used
        MOV     r4, #0                      ; width used in bits
10
        TST     r0, r5
        SWIEQ   OS_WriteI + '.'
        BEQ     %FT30
        MOV     r2, r1
        ADD     r4, r4, #1
        TST     r0, r3
        SWINE   OS_WriteI + '1'
        SWIEQ   OS_WriteI + '0'
30
        SUB     r1, r1, #1
        MOVS    r0, r0, LSR #1
        BNE     %BT10

; spacer
        SWI     OS_WriteI + ' '
        SWI     OS_WriteI + ' '

; Print the value
        AND     r1, r3, r5
        MOV     r1, r1, LSR r2              ; shift down
        TEQ     r4, #1
        BNE     %FT50

; simple flag
        TEQ     r1, #0
        ADRNE   r0, %FT40
        ADREQ   r0, %FT41
        PrintString r0, 20
        B       %FT60
40
        = "SET",0
41
        = "clear",0
        ALIGN

; bit mask
50
        PrintHex r1, 10
        PrintInteger r1, 10

60
        PrintMessage $bits, 0

        SWI     OS_NewLine

        LDMFD   sp!, {r0-r5}
        MEND


; -------------------------------------------------------------------------
        MACRO
$label  PrintBitChar $reg, $bit, $onchar
        Push    "r0, lr"
$label  TST     $reg, #1<<$bit
        MOVNE   r0, #$onchar
        MOVEQ   r0, #' '
        SWI     XOS_WriteC
        Pull    "r0, lr"
        MEND


        END
